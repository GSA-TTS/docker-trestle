#! /usr/bin/env bash

usage="
$0: Assemble markdown controls into an OSCAL JSON SSP

Usage:
    $0 -h
    $0 [-n SYSTEM_NAME] [-c COMMA_SEP_COMPDEFS] [-m MARKDOWN_DIR] [-r]

Options:
-h: show help and exit
-n: System Name. Defaults to 'system-name' value in trestle-config.yaml
-c: Comma-separated list of ComponentDefinitions to include. Defaults to 'components:' list in config
-m: Directory containing markdown files. Defaults to 'markdown' value in config, or 'control-statements'
-r: Regenerate UUIDs

Notes:
* Will load defaults from trestle-config.yaml file, if present
"

set -e

declare -a optional_args
source /app/bin/functions.sh
markdown=$(yaml_parse_value 'trestle-config.yaml' 'markdown' 'control-statements')
system_name=$(yaml_parse_value 'trestle-config.yaml' 'system-name')
components=$(yaml_comma_sep_components 'trestle-config.yaml')

while getopts "hn:c:m:r" opt; do
    case "$opt" in
        n)
            system_name=${OPTARG}
            ;;
        c)
            components=${OPTARG}
            ;;
        m)
            markdown=${OPTARG}
            ;;
        r)
            optional_args+=("-r")
            ;;
        h)
            echo "$usage"
            exit 0
            ;;
    esac
done

if [ "$system_name" = "" ]; then
    echo "$usage"
    exit 1
fi

if [ "$components" != "" ]; then
    optional_args+=("-cd" $components)
fi

run_defaults="false"
if [ -d "system-security-plans/$system_name" ]; then
    merge-ssp -n "$system_name"
else
    echo "No existing SSP found, we will run gsa-defaults after assembling the SSP"
    run_defaults="true"
fi

trestle author ssp-assemble -o "$system_name" -m "$markdown" "${optional_args[@]}"

if [ $run_defaults = "true" ]; then
    trestle gsa-defaults -f "system-security-plans/$system_name/system-security-plan.json"
fi
split-ssp -n "$system_name"
